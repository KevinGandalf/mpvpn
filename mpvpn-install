#!/bin/bash
set -e

#source /opt/mpvpn/globals.sh

check_and_disable_ufw() {
    if command -v ufw >/dev/null 2>&1; then
        echo "üõ†Ô∏è  Deaktiviere ufw..."
        systemctl stop ufw || true
        systemctl disable ufw || true
        ufw disable || true
    else
        echo "‚ÑπÔ∏è  ufw ist nicht installiert oder nicht aktiv."
    fi
}

check_and_disable_firewalld() {
    if systemctl is-active --quiet firewalld; then
        echo "üõ†Ô∏è  Deaktiviere firewalld..."
        systemctl stop firewalld
        systemctl disable firewalld
    else
        echo "‚ÑπÔ∏è  firewalld ist nicht aktiv oder nicht installiert."
    fi
}

check_iproute2() {
    if ! command -v ip >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  iproute2 fehlt. Versuche Installation..."
        case "$DISTRO" in
            debian|ubuntu|raspbian) apt install -y iproute2 ;;
            fedora|rocky|centos|almalinux) dnf install -y iproute ;;
            arch) pacman -S --noconfirm iproute2 ;;
            opensuse) zypper install -y iproute2 ;;
            *) echo "‚ùå iproute2 konnte nicht automatisch installiert werden." ;;
        esac
    fi
}

install_common_tools_debian() {
    apt update && apt upgrade -y && apt install -y curl wget git iptables net-tools nano rsyslog jq dnsutils dialog wireguard-tools bc
}

install_common_tools_rpm() {
    dnf update -y && dnf upgrade -y && dnf install -y curl wget git iptables net-tools nano rsyslog jq bind-utils dialog wireguard-tools bc
}

install_common_tools_arch() {
    pacman -Syu --noconfirm && pacman -S --noconfirm curl wget git iptables net-tools nano syslog-ng jq bind-tools dialog wireguard-tools bc
}

install_common_tools_suse() {
    zypper refresh && zypper update -y && zypper install -y curl wget git iptables net-tools nano syslog-ng jq bind-utils dialog wireguard-tools bc
}

install_iptables_alternative_debian() {
    if ! dpkg -s iptables-persistent >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  iptables-persistent fehlt."
        read -p "Installiere iptables-persistent? (y/n): " confirm && [[ "$confirm" == "y" ]] && apt install -y iptables-persistent
    fi
}

install_iptables_alternative_rpm() {
    if ! rpm -q iptables-services >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  iptables-services fehlt."
        read -p "Installiere iptables-services? (y/n): " confirm && [[ "$confirm" == "y" ]] && dnf install -y iptables-services
    fi
}

install_epel_if_needed() {
    if [[ "$DISTRO" =~ ^(rocky|centos|almalinux)$ ]]; then
        if ! rpm -q epel-release >/dev/null 2>&1; then
            echo "üõ†Ô∏è  Installiere EPEL-Repository..."
            dnf install -y epel-release
        fi
    fi
}

install_debian_ubuntu() {
    echo "üõ†Ô∏è  Debian/Ubuntu: Update..."
    apt update && apt upgrade -y
    install_common_tools_debian
    check_iproute2
    install_iptables_alternative_debian

    read -p "M√∂chtest du OpenVPN installieren? (y/n): " install_ovpn
    [[ "$install_ovpn" == "y" ]] && apt install -y openvpn

    check_and_disable_ufw
    echo "‚úÖ Debian/Ubuntu: Fertig."
}

install_fedora() {
    echo "üõ†Ô∏è  Fedora: Update..."
    dnf update -y && dnf upgrade -y
    install_common_tools_rpm
    check_iproute2
    install_iptables_alternative_rpm

    read -p "M√∂chtest du OpenVPN installieren? (y/n): " install_ovpn
    [[ "$install_ovpn" == "y" ]] && dnf install -y openvpn

    check_and_disable_firewalld
    echo "‚úÖ Fedora: Fertig."
}

install_rocky_alma() {
    echo "üõ†Ô∏è  Rocky/CentOS/AlmaLinux: Update..."
    dnf update -y && dnf upgrade -y
    install_epel_if_needed
    install_common_tools_rpm
    check_iproute2
    install_iptables_alternative_rpm

    read -p "M√∂chtest du OpenVPN installieren? (y/n): " install_ovpn
    [[ "$install_ovpn" == "y" ]] && dnf install -y openvpn

    check_and_disable_firewalld
    echo "‚úÖ Rocky/CentOS/AlmaLinux: Fertig."
}

install_arch() {
    echo "üõ†Ô∏è  Arch Linux: Update..."
    pacman -Syu --noconfirm
    install_common_tools_arch
    check_iproute2

    read -p "M√∂chtest du OpenVPN installieren? (y/n): " install_ovpn
    [[ "$install_ovpn" == "y" ]] && pacman -S --noconfirm openvpn

    check_and_disable_firewalld
    echo "‚úÖ Arch Linux: Fertig."
}

install_opensuse() {
    echo "üõ†Ô∏è  openSUSE: Update..."
    zypper update -y
    install_common_tools_suse
    check_iproute2
    install_iptables_alternative_rpm

    read -p "M√∂chtest du OpenVPN installieren? (y/n): " install_ovpn
    [[ "$install_ovpn" == "y" ]] && zypper install -y openvpn

    check_and_disable_firewalld
    echo "‚úÖ openSUSE: Fertig."
}

detect_distro() {
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        DISTRO=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
    else
        echo "‚ùå Kann Distribution nicht erkennen - /etc/os-release nicht gefunden"
        exit 1
    fi
}

kernel_upgrade_prompt() {
    echo ""
    read -p "üîß Kernel-Upgrade auf 6.x ausf√ºhren? (y/n): " upgrade_kernel
    if [[ "$upgrade_kernel" == "y" ]]; then
        echo "üöÄ Starte Kernel-Upgrade..."
        bash /opt/mpvpn/helperscripts/misc/kernel_upgrade.sh || echo "‚ö†Ô∏è  Kernel-Upgrade fehlgeschlagen."
        read -p "üîÅ Jetzt neu starten? (y/n): " reboot_now
        [[ "$reboot_now" == "y" ]] && reboot
    fi
}

main() {
    detect_distro
    case "$DISTRO" in
        debian|ubuntu|raspbian) install_debian_ubuntu ;;
        fedora) install_fedora ;;
        rocky|centos|almalinux) install_rocky_alma ;;
        arch|archlinux) install_arch ;;
        opensuse*|sles) install_opensuse ;;
        *)
            echo "‚ùå Distribution '$DISTRO' wird nicht unterst√ºtzt."
            exit 1
            ;;
    esac

    kernel_upgrade_prompt
}

# Main execution
main

# Post-install setup
echo "üîê Setze Root-Passwort (optional)..."
if [ -t 0 ]; then
    read -p "M√∂chtest du das Root-Passwort √§ndern? (y/n): " change_password
    if [[ "$change_password" == "y" ]]; then
        passwd
    else
        echo "‚ÑπÔ∏è  Root-Passwort bleibt unver√§ndert."
    fi
else
    echo "‚ÑπÔ∏è  Nicht-interaktiver Modus: √úberspringe Root-Passwort-√Ñnderung."
fi

echo "üìÇ Installiere mpvpn..."
sudo mkdir -p /opt
cd /opt || exit 1

echo "‚¨áÔ∏è  Klone mpvpn-Repository..."
sudo git clone https://github.com/KevinGandalf/mpvpn.git || {
    echo "‚ùå Git clone fehlgeschlagen"
    exit 1
}

echo "üìÅ Wechsle in /opt/mpvpn..."
cd /opt/mpvpn || exit 1

echo "üîß Setze Berechtigungen..."
sudo find . -type f -name "*.sh" -exec chmod +x {} \;

echo "üîó Erstelle Symlink..."
sudo ln -sf "$(pwd)/helperscripts/assets/menu.sh" /usr/local/bin/mpvpn

echo "üöÄ Starte Installation..."
sudo ./helperscripts/assets/menu.sh --install || {
    echo "‚ùå Installation fehlgeschlagen"
    exit 1
}

# √úberpr√ºfen, ob ENABLE_UNBOUND oder ENABLE_DNSCRYPT auf true gesetzt sind
if grep -qE '^ENABLE_UNBOUND=true' /opt/mpvpn/globals.sh; then
    ENABLE_UNBOUND=true
fi

if grep -qE '^ENABLE_DNSCRYPT=true' /opt/mpvpn/globals.sh; then
    ENABLE_DNSCRYPT=true
fi

# Wenn eine der Variablen auf true gesetzt ist, wird das install_dns.sh Skript aufgerufen
if [[ "$ENABLE_UNBOUND" == true || "$ENABLE_DNSCRYPT" == true ]]; then
    echo "üîê DNS-Konfiguration erkannt:"
    [[ "$ENABLE_UNBOUND" == true ]] && echo " - Unbound wird installiert"
    [[ "$ENABLE_DNSCRYPT" == true ]] && echo " - DNSCrypt wird installiert"
    
    # Rufe das Skript zur DNS-Installation auf
    bash "$BASE_PATH/helperscripts/addons/dns/install_dns.sh"
fi

INSTALL_2FA_SCRIPT="/opt/mpvpn/helperscripts/addons/ssh/install_ssh2fa.sh"
# === SSH 2FA aktivieren wenn gew√ºnscht ===
if [[ "$ENABLE_SSH2FA" == "true" ]]; then
  if [[ -x "$INSTALL_2FA_SCRIPT" ]]; then
    echo "[*] SSH 2FA ist aktiviert ‚Äì Starte Installationsskript..."
    bash "$INSTALL_2FA_SCRIPT"
  else
    echo "[!] SSH 2FA-Skript nicht gefunden oder nicht ausf√ºhrbar: $INSTALL_2FA_SCRIPT"
  fi
else
  echo "[*] SSH 2FA ist deaktiviert ‚Äì √ºberspringe Einrichtung."
fi

# Post-install info
cat <<EOF

üîß mpvpn erfolgreich installiert! N√§chste Schritte:
----------------------------------
1. VPN-Profile hinzuf√ºgen:
   - WireGuard: mpvpn --addwg
   - OpenVPN: mpvpn --addovpn

2. Konfiguration bearbeiten:
   sudo nano /opt/mpvpn/globals.sh

3. VPN starten:
   mpvpn --startmpvpn

üìñ Dokumentation: https://github.com/KevinGandalf/mpvpn
üí¨ Discord: https://discord.gg/qXRzXvzJQM
----------------------------------
üéâ Installation abgeschlossen! Viel Erfolg mit mpvpn!
EOF
